@model WebApp.ViewModels.ProductIndexViewModel

@{
    ViewData["Title"] = "Naručivanje Online - Menu";
}

<link rel="stylesheet" href="~/css/Menu.css" />


<div class="container page-content">
    <!-- PRODUCTS PANEL -->
    <div class="products-panel">
        <!-- Category Buttons -->
        <div class="menu-categories">
            <button class="category-btn active" data-category="all">All</button>
            @foreach (var cat in Model.Categories)
            {
                <button class="category-btn" data-category="@cat">@cat</button>
            }
        </div>

        <!-- Product Sections -->
        @foreach (var cat in Model.Categories)
        {
            <div class="menu-section" data-category="@cat">
                <h2 class="section-title">@cat</h2>
                <div class="menu-items">
                    @foreach (var item in Model.Products.Where(p => p.CategoryName == cat))
                    {
                        <div class="menu-item"
                             data-id="@item.Id"
                             data-name="@item.Name"
                             data-price="@item.Price"
                             data-image="@item.ImageUrl">
                            <img src="@(Url.Content("~/images/placeholder.png"))"
                                 alt="@item.Name" class="item-image" />
                            <div class="item-details">
                                <div class="item-name">@item.Name</div>
                                <div class="item-description">@item.Description</div>
                                <div class="item-price">@item.Price.ToString("F2") €</div>
                                <div class="item-rating"></div> <!-- Rating display -->
                                <button type="button" class="order-btn">Add to Order</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <!-- CART PANEL -->
    <div id="cart-panel" class="cart-panel">
        <h2>Your Cart</h2>
        <ul id="cart-items"></ul>
        <p><strong>Total: </strong><span id="cart-total">0.00</span> €</p>
        <button id="checkout-btn" class="checkout-btn">Proceed to Checkout</button>
    </div>
</div>

@section Scripts {
    <script>
        // Category filtering
        document.querySelectorAll('.category-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.category-btn').forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                const cat = button.dataset.category;
                document.querySelectorAll('.menu-section').forEach(sec => {
                    sec.style.display = (cat === 'all' || sec.dataset.category === cat) ? 'block' : 'none';
                });
            });
        });

        // Cart logic using localStorage
        let cart = JSON.parse(localStorage.getItem('cart') || '[]');

        function renderCart() {
            const listEl = document.getElementById('cart-items');
            const totalEl = document.getElementById('cart-total');
            listEl.innerHTML = '';
            let total = 0;

            cart.forEach(item => {
                const li = document.createElement('li');
                li.innerHTML = `
                        <span class="cart-item-text">${item.name} × ${item.qty} — €${(item.price * item.qty).toFixed(2)}</span>
                        <button type="button" class="remove-btn" data-id="${item.id}" aria-label="Remove">&times;</button>
                    `;
                listEl.appendChild(li);
                total += item.price * item.qty;
            });

            totalEl.textContent = total.toFixed(2);
            localStorage.setItem('cart', JSON.stringify(cart));

            // Attach remove handlers
            document.querySelectorAll('.remove-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.id;
                    cart = cart.filter(x => x.id !== id);
                    renderCart();
                });
            });
        }

        // Add rating display for each product
        document.querySelectorAll('.menu-item').forEach(item => {
            const id = item.dataset.id;
            const ratingDiv = item.querySelector('.item-rating');

            if (ratingDiv) {
                fetch(`/api/review/average/${id}`)
                    .then(res => {
                        if (!res.ok) throw new Error(`Status: ${res.status}`);
                        return res.json();
                    })
                    .then(avg => {
                        ratingDiv.textContent = avg !== null
                            ? `Rating: ${avg.toFixed(1)} ★`
                            : "Not rated yet";
                    })
                    .catch(err => {
                        console.error(`Rating fetch error for product ${id}`, err);
                        ratingDiv.textContent = "Rating unavailable";
                    });
            }
        });

        document.querySelectorAll('.order-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const card = btn.closest('.menu-item');
                const id = card.dataset.id;
                window.location.href = `/Product/Details/${id}`;
            });
        });

        // Checkout button logic
        document.getElementById('checkout-btn').addEventListener('click', async () => {
            if (cart.length === 0) {
                alert("Your cart is empty.");
                return;
            }

            const orderDto = {
                orderDate: new Date().toISOString(),
                status: "Pending",
                totalAmount: cart.reduce((sum, item) => sum + (item.price * item.qty), 0),
                tableId: 1 // You might want to make this dynamic
            };

            try {
                const response = await fetch("/Order/Checkout", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(orderDto)
                });

                if (!response.ok) throw new Error("Checkout failed");

                // Clear cart on success
                cart = [];
                localStorage.removeItem('cart');
                renderCart();
                alert("Order placed successfully!");
            } catch (error) {
                console.error("Checkout error:", error);
                alert("There was an error processing your order.");
            }
        });

        // Initial render
        renderCart();
    </script>
}