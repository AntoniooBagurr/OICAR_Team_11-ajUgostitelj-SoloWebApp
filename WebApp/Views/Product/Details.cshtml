@model WebAPI.DTOs.ProductDto

@{
    ViewData["Title"] = "Product Details";
}

<style>
    :root {
        --primary-color: #6F4E37;
        --secondary-color: #C4A484;
        --accent-color: #E5C3A6;
        --text-color: #333;
        --light-text: #f8f9fa;
        --dark-coffee: #5a3b2b;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        color: var(--text-color);
        background-color: #f5f5f5;
        line-height: 1.6;
    }

    .container-details {
        max-width: 1000px;
        margin: 40px auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
    }

    .product-image {
        flex: 1 1 40%;
    }

    .product-image img {
        width: 100%;
        height: auto;
        border-radius: 10px;
    }

    .product-info {
        flex: 1 1 50%;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .item-name {
        font-size: 2rem;
        color: var(--primary-color);
        margin-bottom: 10px;
    }

    .item-description {
        font-size: 1rem;
        color: #666;
    }

    .item-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 10px 0;
    }

    .quantity-input {
        width: 60px;
        padding: 5px;
        font-size: 1rem;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .button-group {
        display: flex;
        gap: 15px;
        margin-top: 20px;
    }

    .add-to-cart-btn {
        background-color: var(--primary-color);
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .add-to-cart-btn:hover {
        background-color: var(--dark-coffee);
    }

    .go-back-btn {
        background-color: var(--secondary-color);
        color: white;
        padding: 10px 20px;
        border-radius: 6px;
        text-decoration: none;
        font-weight: bold;
        display: inline-block;
        transition: background-color 0.3s;
    }

    .go-back-btn:hover {
        background-color: var(--dark-coffee);
    }

    @@media (max-width: 768px) {
        .container-details {
            flex-direction: column;
            padding: 15px;
        }
    }
</style>

<div class="container-details">
    <div class="product-detail">
        <div class="product-image">
            <img src="@Model.ImageUrl ?? "https://via.placeholder.com/400x300?text=No+Image"" alt="@Model.Name" class="item-image">
        </div>
        <div class="product-info">
            <h1 class="item-name">@Model.Name</h1>
            <p class="item-description">@Model.Description</p>
            <div class="item-price" id="total-price">@Model.Price.ToString("F2") €</div>

            <div class="quantity-selector">
                <label for="quantity">Quantity:</label>
                <input type="number" id="quantity" name="quantity" min="1" value="1" class="quantity-input" onchange="updateTotal()">
            </div>

            <div class="button-group">
                <button class="add-to-cart-btn" onclick="addToCart()">Add to Cart</button>
                <a href="@Url.Action("Index", "Product")" class="go-back-btn">Go Back</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const unitPrice = parseFloat("@Model.Price");

        function updateTotal() {
            const qty = parseInt(document.getElementById("quantity").value);
            const total = (unitPrice * qty).toFixed(2);
            document.getElementById("total-price").textContent = `${total} €`;
        }

        function addToCart() {
            const id = "@Model.Id";
            const name = "@Model.Name";
            const price = parseFloat("@Model.Price");
            const qty = parseInt(document.getElementById("quantity").value);

            let cart = JSON.parse(localStorage.getItem('cart') || '[]');

            const existing = cart.find(x => x.id === id);
            if (existing) {
                existing.qty += qty;
            } else {
                cart.push({ id, name, price, qty });
            }

            localStorage.setItem('cart', JSON.stringify(cart));
            window.location.href = '/Cart';
        }

        document.addEventListener("DOMContentLoaded", updateTotal);
    </script>
}
