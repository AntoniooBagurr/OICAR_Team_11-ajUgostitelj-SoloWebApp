@model WebApp.ViewModels.ProductReviewsViewModel
@{
    ViewData["Title"] = "Product Reviews";
}

<style>
:root {
    --primary-color: #6F4E37;      /* Coffee brown */
    --secondary-color: #C4A484;    /* Light coffee */
    --accent-color: #E5C3A6;       /* Cream */
    --text-color: #333;
    --light-text: #f8f9fa;
    --dark-coffee: #5a3b2b;
}

    * {
        box-sizing: border-box;
    }

/* Reset */
body {
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f5f5;
    color: var(--text-color);
    line-height: 1.6;
}

/* Container */
    form.review-form, ul.reviews-list {
        max-width: 800px;
        margin: 30px auto;
        padding: 30px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
/* Headings */
h1 {
    text-align: center;
    font-size: 2.2rem;
    color: var(--primary-color);
    margin-bottom: 20px;
}

/* Inputs & Select */
/* Form Inputs Polished */
select,
input[type="text"],
textarea {
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

select:focus,
input[type="text"]:focus,
textarea:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 4px rgba(111, 78, 55, 0.1);
    outline: none;
}

/* Placeholder spacing for form */
form.review-form {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

/* Headings */
h1 {
    text-align: center;
    font-size: 2.4rem;
    font-weight: 600;
    color: var(--primary-color);
    margin-top: 40px;
    margin-bottom: 30px;
}

/* Form grouping for spacing */
form.review-form > * {
    margin-bottom: 10px;
}

/* Reviews */
ul.reviews-list li {
    transition: transform 0.2s ease;
}
ul.reviews-list li:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

/* Responsive polish */
@@media (max-width: 768px) {
    h1 {
        font-size: 1.8rem;
    }

    .rating-star {
        font-size: 1.6rem;
    }
}


/* Button */
button[type="submit"] {
    display: inline-block;
    width: 100%;
    padding: 15px;
    background-color: var(--primary-color);
    color: #fff;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
}

button[type="submit"]:hover {
    background-color: var(--dark-coffee);
    transform: translateY(-2px);
}

/* Reviews list */
    ul.reviews-list {
        list-style: none;
        padding: 0;
        margin-top: 40px;
    }

        ul.reviews-list li {
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid var(--secondary-color);
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.05);
        }

li strong {
    font-weight: bold;
    color: var(--primary-color);
}

li em {
    color: var(--dark-coffee);
}

li br {
    margin-bottom: 10px;
}

p {
    text-align: center;
    font-style: italic;
    color: #666;
    padding: 40px 0;
}

    .rating-container {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .rating-star {
        font-size: 2rem;
        color: var(--secondary-color);
        cursor: pointer;
        transition: color 0.2s, transform 0.2s;
    }

        .rating-star:hover,
        .rating-star.selected,
        .rating-star.hovered {
            color: var(--primary-color);
            transform: scale(1.1);
        }


/* Responsive */
@@media (max-width: 768px) {
    form, ul {
        padding: 20px;
    }
}
</style>

<h1>Product Reviews</h1>
<form asp-action="ProductReviews" method="post" class="review-form">
    <input type="hidden" asp-for="NewReview.ProductName" id="productNameField" />
    <select asp-for="NewReview.ProductId" id="productSelect" onchange="document.getElementById('productNameField').value = this.options[this.selectedIndex].text">
        <option value="">Select Product...</option>
        @foreach (var p in Model.Products)
        {
            <option value="@p.Id">@p.Name</option>
        }
    </select>
    <div class="rating-container">
        @for (int i = 1; i <= 5; i++)
        {
            <span class="rating-star" data-value="@i">&#9733;</span>
        }
    </div>
    <input type="hidden" asp-for="NewReview.Rating" id="ratingInput" />
    <textarea asp-for="NewReview.Comment" required></textarea>
    <input type="text" asp-for="NewReview.ReviewerName" required />
    <button type="submit">Submit</button>
</form>

@if (Model.Reviews.Any())
{
    <ul class="reviews-list">
        @foreach (var r in Model.Reviews)
        {
            <li>
                <strong>@r.ReviewerName</strong> (@r.ReviewDate.ToString("g")) - <em>@r.ProductName</em><br />
                Rating: @r.Rating ★<br />   
                @r.Comment
            </li>
        }
    </ul>
}
else
{
    <p>No reviews yet.</p>
}
@section Scripts {
    <script>
        const stars = document.querySelectorAll('.rating-star');
        const input = document.getElementById('ratingInput');

        stars.forEach((star, index) => {
            star.addEventListener('click', () => {
                const rating = star.getAttribute('data-value');
                input.value = rating;
                updateStars(rating);
            });

            star.addEventListener('mouseover', () => {
                updateStars(star.getAttribute('data-value'));
            });

            star.addEventListener('mouseout', () => {
                updateStars(input.value);
            });
        });

        function updateStars(rating) {
            stars.forEach((s, i) => {
                s.classList.remove('selected');
                if (i < rating) s.classList.add('selected');
            });
        }

        // If form is re-rendered with existing rating:
        updateStars(input.value || 0);
    </script>
}


