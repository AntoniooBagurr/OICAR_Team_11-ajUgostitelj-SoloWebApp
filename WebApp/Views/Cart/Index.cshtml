@model List<WebApp.ViewModels.ProductCartViewModel>
@{
    ViewData["Title"] = "Your Shopping Cart";
}

<style>
    /* Enhanced Shopping Cart CSS */
:root {
    --primary: #6F4E37;
    --primary-dark: #5a3b2b;
    --secondary: #C4A484;
    --accent: #E5C3A6;
    --bg: #fdfaf6;
    --light: #fff;
    --danger: #ff6b6b;
    --danger-dark: #e63946;
    --text: #333;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: var(--bg);
    margin: 0;
    padding: 0;
}

.container-cart {
    max-width: 1100px;
    margin: 50px auto;
    padding: 40px;
    background: var(--light);
    border-radius: 20px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
}

.cart-title {
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--primary);
    text-align: center;
    margin-bottom: 30px;
    border-bottom: 3px solid var(--secondary);
    padding-bottom: 15px;
}

.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
    border-bottom: 1px solid #eee;
    gap: 1.5rem;
}

.item-info {
    flex: 1;
}

.item-name {
    font-size: 1.3rem;
    color: var(--primary);
    font-weight: 700;
    margin-bottom: 5px;
}

.item-price, .item-qty, .item-subtotal {
    font-size: 1rem;
    color: var(--text);
    margin-bottom: 4px;
}

.remove-btn {
    background: transparent;
    border: none;
    color: var(--danger);
    font-size: 1.6rem;
    cursor: pointer;
    transition: color 0.3s;
}

.remove-btn:hover {
    color: var(--danger-dark);
}

.cart-summary {
    margin-top: 40px;
    padding: 25px;
    background-color: var(--accent);
    border-radius: 16px;
    text-align: right;
    box-shadow: 0 6px 12px rgba(0,0,0,0.05);
}

.total-price {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary);
    margin-bottom: 15px;
}

.checkout-btn {
    background-color: var(--primary);
    color: white;
    padding: 14px 30px;
    font-size: 1.1rem;
    font-weight: bold;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
}

.checkout-btn:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
}

.continue-shopping {
    display: inline-block;
    margin-top: 20px;
    font-weight: bold;
    color: var(--primary);
    text-decoration: none;
    transition: color 0.2s;
}

.continue-shopping:hover {
    color: var(--primary-dark);
    text-decoration: underline;
}

@@media (max-width: 768px) {
    .cart-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-summary {
        text-align: center;
    }

    .checkout-btn {
        width: 100%;
        margin-top: 20px;
    }

    .continue-shopping {
        display: block;
        text-align: center;
    }

       
    }

    .qty-control {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin: 8px 0;
    }

    .qty-btn {
        background-color: var(--secondary);
        border: none;
        color: var(--light);
        font-size: 1.2rem;
        font-weight: bold;
        width: 32px;
        height: 32px;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .qty-btn:hover {
            background-color: var(--primary);
        }

    .qty-input {
        width: 50px;
        padding: 6px;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 1rem;
    }

</style>

<div class="container-cart">
    <h1 class="cart-title">Your Shopping Cart</h1>
    <div class="cart-items">
        @if (!Model.Any())
        {
            <p>Your cart is empty.</p>
            <a href="@Url.Action("Index", "Product")" class="continue-shopping">Continue Shopping</a>
        }
        else
        {
            decimal total = 0;
            foreach (var item in Model)
            {
                var subtotal = item.Price * item.Quantity;
                total += subtotal;
                <div class="cart-item">
                    <div class="item-info">
                        <div>
                            <div class="item-name">@item.Name</div>
                            <div class="item-price-wrapper">
                                <span class="item-price" data-price="@item.Price.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                                </span> 
                            </div>
                            <div class="qty-control">
                                <button type="button" class="qty-btn" onclick="updateQty(this, -1)">–</button>
                                <input type="number" class="qty-input" value="@item.Quantity" min="1" onchange="manualQtyChange(this)" />
                                <button type="button" class="qty-btn" onclick="updateQty(this, 1)">+</button>
                            </div>
                            <div class="item-subtotal">Cijena: @subtotal.ToString("F2") €</div>
                        </div>
                    </div>
                    <form action="/Cart/Remove" method="post">
                        <input type="hidden" name="id" value="@item.Id" />
                        <button type="submit" class="remove-btn">&times;</button>
                    </form>
                </div>
            }
            <div class="cart-summary">
                <div class="total-price">Total: @total.ToString("F2") €</div>
                <form action="/Payment/Checkout" method="get">
                    <button type="submit" class="checkout-btn">Proceed to Checkout</button>
                </form>
                <a href="@Url.Action("Index", "Product")" class="continue-shopping">Continue Shopping</a>
            </div>
        }
    </div>
</div>
@section Scripts {
    <script>
        function updateQty(btn, delta) {
            const wrapper = btn.closest(".cart-item");
            if (!wrapper) return;
            const input = wrapper.querySelector(".qty-input");
            if (!input) return;
            let qty = parseInt(input.value);
            if (isNaN(qty)) qty = 1;
            qty += delta;
            if (qty < 1) qty = 1;
            input.value = qty;
            recalc(wrapper);
        }

        function manualQtyChange(input) {
            const wrapper = input.closest(".cart-item");
            if (!wrapper) return;
            let qty = parseInt(input.value);
            if (isNaN(qty) || qty < 1) qty = 1;
            input.value = qty;
            recalc(wrapper);
        }

        function recalc(itemRow) {
            try {
                if (!itemRow) {
                    console.error("itemRow is null. Check your DOM structure or selector.");
                    return;
                }
                const priceElement = itemRow.querySelector(".item-price");
                const subtotalElement = itemRow.querySelector(".subtotal");
                const qtyInput = itemRow.querySelector(".qty-input");

                if (!priceElement || !subtotalElement || !qtyInput) {
                    console.error("Missing elements for recalculation.");
                    return;
                }

                const priceText = priceElement.dataset.price;
                const price = parseFloat(priceText.replace(',', '.'));
                const qty = parseInt(qtyInput.value);

                if (!isNaN(price) && !isNaN(qty)) {
                    const subtotal = price * qty;
                    subtotalElement.textContent = subtotal.toFixed(2);
                }

                let total = 0;
                document.querySelectorAll(".cart-item").forEach(item => {
                    const priceEl = item.querySelector(".item-price");
                    const inputEl = item.querySelector(".qty-input");
                    if (!priceEl || !inputEl) return;
                    const price = parseFloat(priceEl.dataset.price.replace(',', '.'));
                    const qty = parseInt(inputEl.value);
                    if (!isNaN(price) && !isNaN(qty)) {
                        total += price * qty;
                    }
                });

                const totalEl = document.getElementById("total-price");
                if (totalEl) {
                    totalEl.textContent = total.toFixed(2);
                } else {
                    console.error("Total element not found.");
                }
            } catch (err) {
                console.error("recalc error:", err);
            }
        }
    </script>
}